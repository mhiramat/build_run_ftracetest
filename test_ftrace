#!/bin/bash
#
# testftrace runs build tests and selftests on qemu

# TODO: check prerequisites

usage() {
  echo << EOF
Usage:
 $0 [options] [CONFIGS]

Options:
   -a, --arch <ARCH>	Specify test architectures, which are space separated.
   -h, --help		Show this message.
EOF
exit 0
}

DEF_ARCH=x86_64
CONFS=
ARCH=

while [ "$#" != 0 ]; do
  ARG=$1
  shift 1
  case $ARG in
   -a|--arch)
     ARCH="$ARCH $1"
     shift 1
     ;;
   -h|--help)
     usage
     ;;
   *)
     if [ -f $ARG ]; then
       CONFS="$CONFS $ARG"
     else
       usage
     fi
  esac
done

if [ -z "$ARCH" ]; then
  ARCH="$DEF_ARCH"
fi

set -e
export LANG=en_US.UTF-8 || export LANG=c

absdir() { # dir
  (cd $1; pwd)
}

TOP_DIR=`dirname $0`
TOP_DIR=`absdir $TOP_DIR`

MINCS_DIR=$TOP_DIR/mincs
ERMINE=$MINCS_DIR/ermine-breeder
MINCS_LINUX_DIR=$MINCS_DIR/work/linux
LINUX_SRC_DIR=$MINCS_LINUX_DIR/linux
FTRACETEST_DIR=$LINUX_SRC_DIR/tools/testing/selftests/ftrace
SCRIPT_DIR=$TOP_DIR/scripts

if [ ! -x $ERMINE ]; then 
	echo "please sync submodule (\`git submodule init && git submodule update\`)"
	exit 1
fi

build_ermine() { # arch config
  echo -e "======\n Build kernel ($1, $2) \n======\n"
  if $ERMINE --rebuild-kernel --arch $1 --config $2 ; then
    echo -e "======\n Successfully build kernel \n======\n"
  else
    echo "Build failure"
  fi
}

run_ermine() { # arch config
  set -e
  echo -e "======\n Boot and run build kernel ($1, $2) \n======\n"
  $ERMINE testrun --arch $1 --work $TEST_DIR
  echo -e "======\n Successfully boot and run \n======\n"
}

setup_testdir() { # test-dir
  mkdir -p $1
  cp -r $FTRACETEST_DIR $1/
  cp $SCRIPT_DIR/run-ftracetest.sh $1/run.sh
  (cd `dirname $1`
  rm -f latest
  ln -s `basename $1` latest)
}

#BUILD_ARCH="arm arm64 powerpc loongarch riscv i386 x86_64"
BUILD_ARCH="$ARCH"
RUN_ARCH="arm64 riscv x86_64"

TEST_DATE=`date +%Y%m%d-%H%M%S`
RESULT_DIR=${TOP_DIR}/results
TEST_DIR=${RESULT_DIR}/$TEST_DATE/

setup_testdir $TEST_DIR

if [ -z "$CONFS" ]; then
  CONFS="$TOP_DIR/configs/*"
fi

exit_fail() { # err_msg
  echo $1
  exit 1
}

check_ermine() { #log-directory
  for checker in $SCRIPT_DIR/check-*.sh; do
    $checker $1 || exit_fail `basename $checker`" failed."
  done
}

for arch in $BUILD_ARCH; do
  for conf in $CONFS; do
    CONFIG=$arch:`basename $conf`
    LOG_DIR=$TEST_DIR/$CONFIG
    mkdir -p $LOG_DIR
    (cd $TEST_DIR
    rm -f current
    ln -s $CONFIG current)
    build_ermine $arch $conf 2>&1 | tee $LOG_DIR/build.log
    cp $MINCS_LINUX_DIR/build-$arch/.config $LOG_DIR/kconfig
    if grep -q "Build failure" $LOG_DIR/build.log ; then
      exit_fail "Failed to build $CONFIG"
    fi
    if echo $RUN_ARCH | grep -qw $arch ; then
       run_ermine $arch $conf $conf 2>&1 | tee $LOG_DIR/runtest.log
       check_ermine $LOG_DIR
    fi
  done
done
